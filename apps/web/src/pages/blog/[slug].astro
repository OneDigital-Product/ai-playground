---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);
  return posts.map((post) => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;
if (!slug) {
  throw new Error("Missing blog slug");
}

const allPosts = await getCollection("blog", ({ data }) => !data.draft);
const entry = allPosts.find((p) => p.slug === slug);

if (!entry) {
  Astro.response.status = 404;
}

const { title, description, pubDate, updatedDate, tags = [] } = entry?.data ?? {};
const canonical = `/app/blog/${slug}`;
const rendered = entry ? await entry.render() : null;
---

<BaseLayout title={entry ? `${title} — Blog` : "Post not found"} description={description}>
  <main class="mx-auto max-w-3xl p-6">
    {entry ? (
      <article class="max-w-none">
        <header class="mb-6">
          <h1 class="text-3xl font-bold mb-2">{title}</h1>
          <p class="text-sm text-neutral-500">
            {new Date(pubDate).toLocaleDateString()}
            {updatedDate ? ` · Updated ${new Date(updatedDate).toLocaleDateString()}` : ""}
          </p>
          {tags.length > 0 && (
            <ul class="mt-2 flex flex-wrap gap-2 text-xs text-neutral-600">
              {tags.map((t) => (
                <li class="rounded-full bg-neutral-100 px-2 py-1">{t}</li>
              ))}
            </ul>
          )}
        </header>

        {rendered && <rendered.Content />}
      </article>
    ) : (
      <section>
        <h1 class="text-2xl font-semibold mb-2">Post not found</h1>
        <p class="mb-4">We couldn't find that blog post. It may have been moved or deleted.</p>
        <a class="text-blue-600 hover:underline" href="/app">Go back home</a>
      </section>
    )}
  </main>

  <head slot="head">
    <link rel="canonical" href={canonical} />
    {entry && (
      <>
        <meta property="og:type" content="article" />
        <meta property="article:published_time" content={new Date(pubDate).toISOString()} />
        {updatedDate && (
          <meta property="article:modified_time" content={new Date(updatedDate).toISOString()} />
        )}
        {tags.map((t) => (
          <meta property="article:tag" content={t} />
        ))}
      </>
    )}
  </head>
</BaseLayout>

