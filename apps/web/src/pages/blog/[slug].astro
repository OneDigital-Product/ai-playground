---
import BlogLayout from "../../layouts/BlogLayout.astro";
import { getCollection } from "astro:content";
// Using plain markup for header microcomponents to avoid extra runtime.

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);
  return posts.map((post) => ({ params: { slug: post.slug } }));
}

const { slug } = Astro.params;
if (!slug) {
  throw new Error("Missing blog slug");
}

const allPosts = await getCollection("blog", ({ data }) => !data.draft);
const entry = allPosts.find((p) => p.slug === slug);

if (!entry) {
  Astro.response.status = 404;
}

const sorted = [...allPosts].sort(
  (a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime()
);
const index = sorted.findIndex((p) => p.slug === slug);
const prevPost = index > 0 ? sorted[index - 1] : undefined; // newer
const nextPost = index >= 0 && index < sorted.length - 1 ? sorted[index + 1] : undefined; // older

const { title, description, pubDate, updatedDate, tags = [] } = entry?.data ?? {};
const canonical = `/app/blog/${slug}`;
const rendered = entry ? await entry.render() : null;
---

<BlogLayout title={entry ? `${title} — Blog` : "Post not found"} description={description}>
  {entry ? (
    <article class="max-w-none">
      <header class="mb-8 border-b pb-6">
        <span class="mb-2 inline-flex items-center gap-1 font-mono text-[10px] uppercase tracking-[0.2em] text-muted-foreground">/<span>{new Date(pubDate as unknown as string | number | Date).toLocaleDateString()}</span></span>
        <h1 class="text-balance text-4xl sm:text-5xl font-semibold leading-tight tracking-tight mb-2">{title}</h1>
        <p class="text-muted-foreground text-sm">
          {updatedDate ? `Updated ${new Date(updatedDate as unknown as string | number | Date).toLocaleDateString()}` : "Published"} · {new Date(pubDate as unknown as string | number | Date).toLocaleDateString()}
        </p>
        {tags.length > 0 && (
          <ul class="mt-3 flex flex-wrap gap-2">
            {tags.map((t) => (
              <li class="inline-flex items-center rounded-full border bg-secondary px-2.5 py-0.5 text-xs text-secondary-foreground">{t}</li>
            ))}
          </ul>
        )}
      </header>

      {rendered && <rendered.Content />}

      <nav class="mt-8 flex items-center justify-between border-t pt-6 text-sm uppercase tracking-wide text-muted-foreground">
        {prevPost ? (
          <a href={`/app/blog/${prevPost.slug}`} class="hover:text-primary">← Previous</a>
        ) : <span />}
        {nextPost && (
          <a href={`/app/blog/${nextPost.slug}`} class="hover:text-primary">Next →</a>
        )}
      </nav>
    </article>
  ) : (
    <section>
      <h1 class="text-2xl font-semibold mb-2">Post not found</h1>
      <p class="mb-4">We couldn't find that blog post. It may have been moved or deleted.</p>
      <a class="text-blue-600 hover:underline" href="/app">Go back home</a>
    </section>
  )}

  <head slot="head">
    <link rel="canonical" href={canonical} />
    {entry && (
      <>
        <meta property="og:type" content="article" />
        <meta property="article:published_time" content={new Date(pubDate as unknown as string | number | Date).toISOString()} />
        {updatedDate && (
          <meta property="article:modified_time" content={new Date(updatedDate).toISOString()} />
        )}
        {tags.map((t) => (
          <meta property="article:tag" content={t} />
        ))}
      </>
    )}
  </head>
</BlogLayout>
